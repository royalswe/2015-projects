<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="addBoatLength" xml:space="preserve">
    <value>Boat Length: </value>
  </data>
  <data name="addBoatSuccess" xml:space="preserve">
    <value>The new boat where added!</value>
  </data>
  <data name="addBoatType" xml:space="preserve">
    <value>Boat type: </value>
  </data>
  <data name="addMemberName" xml:space="preserve">
    <value>Members name: </value>
  </data>
  <data name="addMemberSSN" xml:space="preserve">
    <value>Members social security number: </value>
  </data>
  <data name="addMemberSuccess" xml:space="preserve">
    <value>The new member where added!</value>
  </data>
  <data name="menuAddNewBoat" xml:space="preserve">
    <value>Add a boat to an existing user</value>
  </data>
  <data name="menuAddNewMember" xml:space="preserve">
    <value>Add a new member</value>
  </data>
  <data name="menuMakeChoice" xml:space="preserve">
    <value>Enter your choice: </value>
  </data>
  <data name="menuQuit" xml:space="preserve">
    <value>Quit</value>
  </data>
  <data name="failMenuWrongChoice" xml:space="preserve">
    <value>Try again: </value>
  </data>
  <data name="menuWelcome" xml:space="preserve">
    <value>Welcome to this amazing application!</value>
  </data>
  <data name="menuGoodBye" xml:space="preserve">
    <value>Press any key to quit...</value>
  </data>
  <data name="getMemberId" xml:space="preserve">
    <value>Enter members ID: </value>
  </data>
  <data name="getMemberIDFail" xml:space="preserve">
    <value>Member do not exist, try again: </value>
  </data>
  <data name="renderBoat" xml:space="preserve">
    <value>{0}: {1}m</value>
  </data>
  <data name="renderMembersName" xml:space="preserve">
    <value>Members name: {0}</value>
  </data>
  <data name="renderMembersNumberOfBoats" xml:space="preserve">
    <value>The member have {0} boat(s)</value>
  </data>
  <data name="renderMembersSSN" xml:space="preserve">
    <value>Members social security number: {0}</value>
  </data>
  <data name="boatTypeCanoe" xml:space="preserve">
    <value>Canoe</value>
  </data>
  <data name="boatTypeMotorsailer" xml:space="preserve">
    <value>Motorsailer</value>
  </data>
  <data name="boatTypeOther" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="boatTypeSailbot" xml:space="preserve">
    <value>Sailboat</value>
  </data>
  <data name="compactListOfMembers" xml:space="preserve">
    <value>List of all members with name, member id and number of boat/boats</value>
  </data>
  <data name="menuRenderCompactListOfMembers" xml:space="preserve">
    <value>Show compact list of members</value>
  </data>
  <data name="back" xml:space="preserve">
    <value>Press {0} to return to menu.</value>
  </data>
  <data name="backKey" xml:space="preserve">
    <value>B</value>
  </data>
  <data name="divider" xml:space="preserve">
    <value>--------------------------</value>
  </data>
  <data name="renderShortMember" xml:space="preserve">
    <value>{0} has Id {1} and has boat/boats.</value>
  </data>
  <data name="removeMember" xml:space="preserve">
    <value>Remove a member</value>
  </data>
  <data name="removeMemberSuccess" xml:space="preserve">
    <value>The user were removed successfully!</value>
  </data>
  <data name="memberHasNoBoat" xml:space="preserve">
    <value>Member has no boats registered</value>
  </data>
  <data name="menuRenderVerboseListOfMembers" xml:space="preserve">
    <value>Show verbose list of members</value>
  </data>
  <data name="renderVerboseListOfMembersTitle" xml:space="preserve">
    <value>LIST OF MEMBERS AND BOATS</value>
  </data>
  <data name="removeBoat" xml:space="preserve">
    <value>Remove a boat from member</value>
  </data>
  <data name="editMember" xml:space="preserve">
    <value>Edit member</value>
  </data>
  <data name="editMemberSuccess" xml:space="preserve">
    <value>The member where updated with the new information!</value>
  </data>
  <data name="failGeneral" xml:space="preserve">
    <value>Something went wrong, please try again.</value>
  </data>
  <data name="editBoat" xml:space="preserve">
    <value>Edit boat</value>
  </data>
  <data name="editBoatSuccess" xml:space="preserve">
    <value>The boat where updated!</value>
  </data>
  <data name="getBoatToRemove" xml:space="preserve">
    <value>Choose a boat number to remove</value>
  </data>
  <data name="getBoatToEdit" xml:space="preserve">
    <value>Choose boat to edit: </value>
  </data>
  <data name="renderBoatInformation" xml:space="preserve">
    <value>Boat {0}: {1}, {2}m</value>
  </data>
  <data name="renderCompactList" xml:space="preserve">
    <value>{0} has ID {1} and has {2} boat(s)</value>
  </data>
  <data name="renderVerboseList" xml:space="preserve">
    <value>Name: {0}, Social Security Number: {1}, Member ID: {2}</value>
  </data>
  <data name="removeBoatSuccess" xml:space="preserve">
    <value>The boat were successfully removed!</value>
  </data>
  <data name="failWrongLength" xml:space="preserve">
    <value>Length must be a whole number, try again: </value>
  </data>
  <data name="menuMember" xml:space="preserve">
    <value>View a member</value>
  </data>
  <data name="pressAnyKey" xml:space="preserve">
    <value>Press any key to continue...</value>
  </data>
  <data name="failNotValidNumber" xml:space="preserve">
    <value>Not a valid number, try again: </value>
  </data>
  <data name="renderNoMembers" xml:space="preserve">
    <value>There is no members yet</value>
  </data>
</root>